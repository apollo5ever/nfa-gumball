{
  "version": 3,
  "sources": ["../../nanoid/index.browser.js", "../../dero-rpc-bridge-api/dist/index.js"],
  "sourcesContent": ["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "import { nanoid } from \"nanoid\";\nexport default class DeroBridgeApi {\n  constructor() {\n    this.channel = new MessageChannel();\n    this.initialized = false;\n    this.resolves = /* @__PURE__ */ new Map();\n  }\n  call(cmd) {\n    if (!this.initialized)\n      return Promise.reject(new Error(`Not initialized.`));\n    const id = nanoid();\n    const msg = { id, cmd };\n    const promise = new Promise((resolve, reject) => {\n      const onMessage = (event) => {\n        if (event.data === \"disconnected\") {\n          this.initialized = false;\n          reject(event);\n        } else if (event.data.id === id) {\n          const { err, data } = event.data;\n          if (data)\n            resolve(data);\n          else if (err)\n            reject(err);\n          else\n            reject(new Error(`Empty event.`));\n          this.channel.port1.removeEventListener(\"message\", onMessage);\n        }\n      };\n      this.channel.port1.addEventListener(\"message\", onMessage);\n      this.channel.port1.start();\n    });\n    this.channel.port1.postMessage(msg);\n    return promise;\n  }\n  daemon(action, args) {\n    return this.call({ entity: \"daemon\", action, args });\n  }\n  wallet(action, args) {\n    return this.call({ entity: \"wallet\", action, args });\n  }\n  init() {\n    if (this.initialized)\n      return Promise.reject(new Error(`Already initialized.`));\n    return new Promise((resolve, reject) => {\n      let timeoutId = setTimeout(() => {\n        if (!this.initialized)\n          reject(new Error(`Can't initialized.`));\n      }, 1e3);\n      this.channel.port1.addEventListener(\"message\", (event) => {\n        if (event.data === \"initialized\") {\n          this.initialized = true;\n          resolve();\n        } else {\n          clearTimeout(timeoutId);\n          reject(new Error(`Can't initialized.`));\n        }\n      }, { once: true });\n      this.channel.port1.start();\n      window.postMessage(\"init-dero-bridge\", \"*\", [this.channel.port2]);\n    });\n  }\n}\n"],
  "mappings": ";;;AAmBA,IAAI,SAAS,CAAC,OAAO,OACnB,OAAO,gBAAgB,IAAI,WAAW,IAAI,CAAC,EAAE,OAAO,CAAC,IAAI,SAAS;AAChE,UAAQ;AACR,MAAI,OAAO,IAAI;AACb,UAAM,KAAK,SAAS,EAAE;AAAA,EACxB,WAAW,OAAO,IAAI;AACpB,WAAO,OAAO,IAAI,SAAS,EAAE,EAAE,YAAY;AAAA,EAC7C,WAAW,OAAO,IAAI;AACpB,UAAM;AAAA,EACR,OAAO;AACL,UAAM;AAAA,EACR;AACA,SAAO;AACT,GAAG,EAAE;;;AC/BP,IAAqB,gBAArB,MAAmC;AAAA,EACjC,cAAc;AACZ,SAAK,UAAU,IAAI,eAAe;AAClC,SAAK,cAAc;AACnB,SAAK,WAA2B,oBAAI,IAAI;AAAA,EAC1C;AAAA,EACA,KAAK,KAAK;AACR,QAAI,CAAC,KAAK;AACR,aAAO,QAAQ,OAAO,IAAI,MAAM,kBAAkB,CAAC;AACrD,UAAM,KAAK,OAAO;AAClB,UAAM,MAAM,EAAE,IAAI,IAAI;AACtB,UAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/C,YAAM,YAAY,CAAC,UAAU;AAC3B,YAAI,MAAM,SAAS,gBAAgB;AACjC,eAAK,cAAc;AACnB,iBAAO,KAAK;AAAA,QACd,WAAW,MAAM,KAAK,OAAO,IAAI;AAC/B,gBAAM,EAAE,KAAK,KAAK,IAAI,MAAM;AAC5B,cAAI;AACF,oBAAQ,IAAI;AAAA,mBACL;AACP,mBAAO,GAAG;AAAA;AAEV,mBAAO,IAAI,MAAM,cAAc,CAAC;AAClC,eAAK,QAAQ,MAAM,oBAAoB,WAAW,SAAS;AAAA,QAC7D;AAAA,MACF;AACA,WAAK,QAAQ,MAAM,iBAAiB,WAAW,SAAS;AACxD,WAAK,QAAQ,MAAM,MAAM;AAAA,IAC3B,CAAC;AACD,SAAK,QAAQ,MAAM,YAAY,GAAG;AAClC,WAAO;AAAA,EACT;AAAA,EACA,OAAO,QAAQ,MAAM;AACnB,WAAO,KAAK,KAAK,EAAE,QAAQ,UAAU,QAAQ,KAAK,CAAC;AAAA,EACrD;AAAA,EACA,OAAO,QAAQ,MAAM;AACnB,WAAO,KAAK,KAAK,EAAE,QAAQ,UAAU,QAAQ,KAAK,CAAC;AAAA,EACrD;AAAA,EACA,OAAO;AACL,QAAI,KAAK;AACP,aAAO,QAAQ,OAAO,IAAI,MAAM,sBAAsB,CAAC;AACzD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,YAAY,WAAW,MAAM;AAC/B,YAAI,CAAC,KAAK;AACR,iBAAO,IAAI,MAAM,oBAAoB,CAAC;AAAA,MAC1C,GAAG,GAAG;AACN,WAAK,QAAQ,MAAM,iBAAiB,WAAW,CAAC,UAAU;AACxD,YAAI,MAAM,SAAS,eAAe;AAChC,eAAK,cAAc;AACnB,kBAAQ;AAAA,QACV,OAAO;AACL,uBAAa,SAAS;AACtB,iBAAO,IAAI,MAAM,oBAAoB,CAAC;AAAA,QACxC;AAAA,MACF,GAAG,EAAE,MAAM,KAAK,CAAC;AACjB,WAAK,QAAQ,MAAM,MAAM;AACzB,aAAO,YAAY,oBAAoB,KAAK,CAAC,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClE,CAAC;AAAA,EACH;AACF;",
  "names": []
}
